using System;
using System.Collections.Generic;
using System.Linq;

namespace PocoGen.Common
{
    /// <summary>
    /// Represents a table in a database.
    /// </summary>
    public class Table
    {
        private readonly FileFormat.Table fileFormatTable = new FileFormat.Table();

        /// <summary>
        /// A list of file format columns that are not found in the table.
        /// </summary>
        private readonly List<FileFormat.Column> oldColumnChanges = new List<FileFormat.Column>();

        /// <summary>
        /// Creates a new table.
        /// </summary>
        /// <param name="name">The table's name.</param>
        public Table(string name)
        {
            if (string.IsNullOrEmpty(name))
                throw new ArgumentException("name is null or empty.", "name");

            this.Columns = new ColumnCollection();
            this.ParentForeignKeys = new ForeignKeyCollection();
            this.ChildForeignKeys = new ForeignKeyCollection();
            this.GeneratedClassName = string.Empty;
            this.Ignore = false;
            this.Name = name;
            this.fileFormatTable.Name = name;
            this.SequenceName = string.Empty;
            this.IsView = false;
        }

        /// <summary>
        /// Creates a new table.
        /// </summary>
        /// <param name="schema">The table's schema.</param>
        /// <param name="name">The table's name.</param>
        /// <param name="isView">true if this is a view, false if this is a table.</param>
        public Table(string schema, string name, bool isView)
            : this(name)
        {
            this.Schema = schema;
            this.IsView = isView;
        }

        /// <summary>
        /// Gets the list of columns.
        /// </summary>
        public ColumnCollection Columns { get; private set; }

        /// <summary>
        /// Gets the list of foreign keys which are referenced by this table.
        /// </summary>
        public ForeignKeyCollection ParentForeignKeys { get; private set; }

        /// <summary>
        /// Gets the list of foreign keys which reference this table.
        /// </summary>
        public ForeignKeyCollection ChildForeignKeys { get; private set; }

        /// <summary>
        /// Gets the table's name.
        /// </summary>
        public string Name { get; private set; }

        /// <summary>
        /// Gets or sets the table's schema.
        /// </summary>
        public string Schema { get; set; }

        /// <summary>
        /// Gets or sets whether this class is a view or table.
        /// </summary>
        public bool IsView { get; set; }

        /// <summary>
        /// Gets or sets the class name which was generated by the table name generators.
        /// </summary>
        public string GeneratedClassName { get; set; }

        /// <summary>
        /// Gets or sets the effective class name. This is the <see cref="GeneratedClassName"/> if the user didn't change it, otherwise it is the user-changed class name.
        /// </summary>
        public string EffectiveClassName
        {
            get
            {
                // If the user changed the class name, it was saved to the fileFormatTable. Otherwise it is the GeneratedClassName.
                return this.fileFormatTable.ClassName ?? this.GeneratedClassName;
            }
            set
            {
                // If the user changes the class name, save the override in the fileFormatTable.
                if (this.GeneratedClassName != value)
                {
                    this.fileFormatTable.ClassName = value;
                }
                else
                {
                    this.fileFormatTable.ClassName = null;
                }
            }
        }

        /// <summary>
        /// Gets or sets the table's sequence name.
        /// </summary>
        public string SequenceName { get; set; }

        /// <summary>
        /// Gets or sets whether this column should be included in the POCO.
        /// </summary>
        public bool Ignore
        {
            get
            {
                return this.fileFormatTable.Ignore;
            }
            set
            {
                this.fileFormatTable.Ignore = value;
            }
        }

        /// <summary>
        /// Returns a list of columns which compose the primary key.
        /// </summary>
        /// <returns>A list of columns which compose the primary key.</returns>
        public ColumnCollection GetPrimaryKeyColumns()
        {
            ColumnCollection primaryKey = new ColumnCollection();
            primaryKey.AddRange(this.Columns.Where(c => !c.Ignore && c.IsPK));

            return primaryKey;
        }

        internal void ApplyExistingFileFormatTable(FileFormat.Table table)
        {
            if (table == null)
                throw new ArgumentNullException("table", "table is null.");
            if (this.fileFormatTable.Name != table.Name)
                throw new ArgumentException("Wrong table for this instance.", "table");

            this.fileFormatTable.ClassName = table.ClassName;
            this.fileFormatTable.Ignore = table.Ignore;
            this.oldColumnChanges.Clear();

            foreach (FileFormat.Column fileColumn in table.Columns)
            {
                if (this.Columns.Contains(fileColumn.Name))
                {
                    Column column = this.Columns[fileColumn.Name];
                    column.ApplyExistingFileFormatColumn(fileColumn);
                }
                else
                {
                    this.oldColumnChanges.Add(fileColumn);
                }
            }
        }

        /// <summary>
        /// Gets the <see cref="FileFormat.Table"/> for this table if the user changed some default value; otherwise null.
        /// </summary>
        /// <returns>The <see cref="FileFormat.Table"/> for this table or null if it is not needed.</returns>
        internal FileFormat.Table GetFileFormatTable()
        {
            this.fileFormatTable.Columns.Clear();
            this.fileFormatTable.Columns.AddRange(this.oldColumnChanges);
            this.fileFormatTable.Columns.AddRange(this.Columns.GetFileFormatColumns());

            if (this.fileFormatTable.Ignore || this.fileFormatTable.ClassName != null || this.fileFormatTable.Columns.Any())
                return this.fileFormatTable;

            return null;
        }
    }
}